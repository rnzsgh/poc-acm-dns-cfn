---
AWSTemplateFormatVersion: 2010-09-09


Description: POC to test programmatic cert validation via DNS


Parameters:

  HostedZoneId:
    Type: String
    Description: The hosted zone id
    MinLength: 1
    MaxLength: 50

  HostedZoneName:
    Type: String
    Description: The Amazon Route 53 Hosted Zone Name - do not include a period at the end
    AllowedPattern: "(^$|^((?!-)[A-Za-z0-9-]{1,63}(?<!-)\\.)+[A-Za-z]{2,6}$)"
    ConstraintDescription: Please enter a valid Route 53 Hosted Zone Name


Resources:

  Certificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Sub '*.${HostedZoneName}'
      ValidationMethod: DNS

  ValidateCertCustomResource:
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !GetAtt CustomResourceLambda.Arn
      StackName: !Ref AWS::StackName
      HostedZoneId: !Ref HostedZoneId

  CustomResourceLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import json, boto3, time
          from botocore.vendored import requests
          def handler(event, context):
            response = {
              'Status': 'SUCCESS',
              "Reason": "See the details in CloudWatch Log Stream: " + context.log_stream_name,
              'PhysicalResourceId': context.log_stream_name,
              'StackId': event['StackId'],
              'RequestId': event['RequestId'],
              'LogicalResourceId': event['LogicalResourceId'],
              'Data': {"Message": "Resource creation successful!"},
            }
            dns_record = None
            dns_record_value = None
            try:
              client = boto3.client('cloudformation')
              dns_client = boto3.client('route53')
              zone_id = event['ResourceProperties']['HostedZoneId']
              stack_name = event['ResourceProperties']['StackName']

              if event['RequestType'] == 'Create':
                creating = True
                while creating:
                  # If you have a lot of resources in your CFN template, you may need to add
                  # iteration logic over the events
                  for row in client.describe_stack_events(StackName=stack_name)['StackEvents']:
                    if 'ResourceType' in row and row['ResourceType'] == 'AWS::CertificateManager::Certificate':
                      if 'ResourceStatusReason' in row and row['ResourceStatusReason'].startswith('Content of DNS Record is:'):
                        vals = row['ResourceStatusReason'].replace('Content of DNS Record is: {Name: ', '') \
                                                          .replace(',Type: CNAME,Value:', '') \
                                                          .replace('}', '') \
                                                          .split()
                        dns_client.change_resource_record_sets(HostedZoneId=zone_id, ChangeBatch={
                          'Changes': [{
                            'Action': 'UPSERT',
                            'ResourceRecordSet': { 'Name': vals[0], 'Type': 'CNAME', 'TTL': 300, 'ResourceRecords': [{ 'Value': vals[1] }] }
                          }]
                        })
                        dns_record = vals[0]
                        dns_record_value = vals[1]
                        creating = False
                        break
                  time.sleep(2)
              if event['RequestType'] == 'Delete':
                for output in client.describe_stacks(StackName=event['StackId'])['Stacks'][0]['Outputs']:
                  if output['OutputKey'] == 'CertDnsValidationRecord':
                    dns_record =  output['OutputValue']
                  if output['OutputKey'] == 'CertDnsValidationRecordValue':
                    dns_record_value =  output['OutputValue']
                dns_client.change_resource_record_sets(HostedZoneId=zone_id, ChangeBatch={
                  'Changes': [{
                    'Action': 'DELETE',
                    'ResourceRecordSet': {
                      'Name': dns_record, 'Type': 'CNAME', 'TTL': 300,
                      'ResourceRecords': [ { 'Value': dns_record_value } ]
                    }
                  }]
                })
            except Exception as e:
              print(e)
              response['Status'] = 'FAILED'
              response["Reason"] = 'Error: ' + str(e)
              response['Data'] = {"Message": "Custom resource failed"}
            if dns_record is not None and dns_record_value is not None:
              response['Data'] = { "DnsRecord": dns_record, "DnsRecordValue": dns_record_value }
            response_body = json.dumps(response)
            headers = {'content-type': '', "content-length": len(response_body) }
            put_response = requests.put(event['ResponseURL'], headers=headers, data=response_body)
            return response
      Handler: index.handler
      Role: !GetAtt CustomResourceLambdaExecutionRole.Arn
      Runtime: python2.7
      Timeout: 900

  CustomResourceLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaENIManagementAccess
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com
      Policies:
        - PolicyName: custom-resource
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: !Sub arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}/*
                Effect: Allow
                Action:
                  - cloudformation:DescribeStacks
                  - cloudformation:DescribeStackEvents
              - Resource: !Sub arn:aws:route53:::hostedzone/${HostedZoneId}
                Effect: Allow
                Action:
                  - route53:ChangeResourceRecordSets


Outputs:

  CertDnsValidationRecord:
    Description: The DNS CNAME created in Route 53 for cert validation
    Value: !GetAtt ValidateCertCustomResource.DnsRecord
    Export:
      Name: !Sub ${AWS::StackName}-CertDnsValidationRecord

  CertDnsValidationRecordValue:
    Description: The DNS CNAME value created in Route 53 for cert validation
    Value: !GetAtt ValidateCertCustomResource.DnsRecordValue
    Export:
      Name: !Sub ${AWS::StackName}-CertDnsValidationRecordValue


